from datetime import datetime
from enum import Enum
from pydantic import Base64Bytes, model_validator
from sqlmodel import Relationship, SQLModel, Field
from typing import List, Optional, Self

class OrderStatus(str, Enum):
    """
    Represents the possible statuses of a customer order.

    This enumeration defines the different stages an order can be in.

    Members:
        new: Indicates that the order has been created but has not yet been
            processed or completed.
        completed: Indicates that the order has been fully processed and
            fulfilled.
    """

    new = "New"
    completed = "Completed"


class Order(SQLModel, table=True):
    __tablename__ = "order"

    """
    Represents a customer order placed for products.

    This class stores comprehensive information about an order, including
    the employee who took the order, the associated sale, the point of sale
    where the order was placed, key dates, any remarks, the current status
    of the order, and the total financial and item quantities.

    Attributes:
        id (Optional[integer]): The unique identifier for this order.
            Automatically generated by the database.
        employee (integer): Foreign key linking this order to the `Employee`
            table, indicating the employee responsible for the order. Indexed.
        sales (Optional[integer]): Foreign key linking this order to the
            `Sale` table, if the order is associated with a specific sale. Indexed.
        point_of_sale (integer): Foreign key linking this order to the
            `PointOfSale` table, indicating where the order was placed. Indexed.
        date (datetime): The date when the order was placed. Defaults to the
            current date and time and is indexed for querying by date.
        expected_date (Optional[datetime]): The date by which the order is
            expected to be fulfilled or delivered.
        remark (Optional[string]): Any additional notes or instructions related to
            this order.
        status (Order Status): The current status of the order
            new: Indicates that the order has been created but has not yet been
                    processed or completed.
            completed: Indicates that the order has been fully processed and
                    fulfilled.
        total (float): The total monetary value of the order.
        total_quantity (float): The total number of items included in the order.
        active (boolean): A boolean flag indicating whether this order is currently
            considered active. Defaults to True.
    """
    id: Optional[int] = Field(default=None, primary_key=True)
    employee: int = Field(foreign_key="users.id", index=True)
    sales: Optional[int] = Field(foreign_key="sale.id", index=True)
    point_of_sale: int = Field(foreign_key="point_of_sale.id", index=True)
    date: datetime = Field(default=datetime.now(), index=True)
    expected_date: Optional[datetime] = Field(default=None)
    remark: Optional[str] = Field(default=None)
    status: OrderStatus = Field(default=OrderStatus.new)
    total: float
    total_quantity: float
    order_items: Optional[List["OrderItem"]] = Relationship(back_populates="orders")
    


class OrderItem(SQLModel, table=True):
    __tablename__ = "order_item"

    """
    Represents a single item within a customer order.

    This class details the specific products included in an order,
    their quantities, unit prices, and the total price for that item.
    It also links back to the order it belongs to.

    Attributes:
        id (Optional[integer]): The unique identifier for this order item.
            Automatically generated by the database.
        product (integer): Foreign key linking this item to the `Product`
            table, identifying the specific product ordered. Indexed.
        quantity (float): The number of units of this product in the order.
        unit_price (float): The price of a single unit of this product at the
            time of the order.
        total (float): The total price for this line item (quantity multiplied
            by unit price).
        order (integer): Foreign key linking this item to the `Order` table,
            indicating which order this item belongs to. Indexed.
    """

    id: Optional[int] = Field(default=None, primary_key=True)
    product: int = Field(foreign_key="product.id", index=True)
    quantity: float
    unit_price: float
    total: float
    employee: int = Field(foreign_key="users.id", index=True)
    order_id: int = Field(foreign_key="order.id", index=True) 
    orders: Optional["Order"] = Relationship(back_populates="order_items")


class SalesType(str, Enum):
    """
    Represents the different types of sales transactions.

    This enumeration categorizes sales based on the payment method or
    terms.

    Members:
        Cash: Indicates a sale where the customer pays the full amount
            at the time of purchase.
        Credit: Indicates a sale where the customer is granted credit and
            will pay at a later date.
    """

    Cash = "Cash"
    Credit = "Credit"


class PaymentMode(str, Enum):
    """
    Represents the various methods by which a customer can make a payment.

    This enumeration lists the different ways a sale can be paid for.

    Members:
        none: Indicates that no specific payment mode has been specified.
        Cash: Payment made using physical currency.
        Cheque: Payment made via a written cheque.
        BankTransfer: Payment made by transferring funds directly from one
            bank account to another.
        Electronic: Payment made through electronic means, such as credit/debit
            cards or online payment platforms.
    """

    none = None
    Cash = "Cash"
    Cheque = "Cheque"
    BankTransfer = "Bank Transfer"
    Electronic = "Electronic"


class PaymentStates(str, Enum):
    """
    Represents the current payment status of a sale.

    This enumeration indicates whether a sale has been fully paid, partially
    paid, or not paid at all.

    Members:
        notPaid: Indicates that the full amount of the sale is still outstanding.
        Paid: Indicates that the full amount of the sale has been received.
        PartiallyPaid: Indicates that some portion of the sale amount has been
            paid, but a balance remains.
    """

    notPaid = "Not Paid"
    Paid = "Paid"
    PartiallyPaid = "Partially Paid"


class SalesStates(str, Enum):
    """
    Represents the different operational statuses of a sale.

    This enumeration defines the various stages or conditions a sale can be in.

    Members:
        new: Indicates that the sale has been initiated but is not yet finalized.
        closed: Indicates that the sale has been completed and finalized.
        void: Indicates that the sale has been cancelled or reversed.
    """

    new = "New"
    closed = "Closed"
    void = "Void"


class Sale(SQLModel, table=True):
    __tablename__ = "sale"

    """
    Represents a sales transaction made by an employee.

    This class captures all the essential details of a sale, including the
    responsible employee, the route and point of sale involved, the date of
    sale, payment information (type, mode, due date, status, date), discounts,
    financial totals, and the overall status of the sale. It also includes
    references to related bank account and cheque records if applicable.

    Attributes:
        id (Optional[integer]): The unique identifier for this sale transaction.
            Automatically generated by the database.
        employee (integer): Foreign key linking this sale to the `Employee`
            table, indicating the employee who made the sale. Indexed.
        route (integer): Foreign key linking this sale to the `Route` table,
            indicating the sales route associated with the sale. Indexed.
        point_of_sale (integer): Foreign key linking this sale to the
            `PointOfSale` table, indicating where the sale occurred. Indexed.
        date (datetime): The date when the sale was made. Defaults to the
            current date and time and is indexed for querying by date.
        remark (Optional[string]): Any additional notes or details about the sale.
        payment_due_date (datetime): The date by which payment for the sale is
            expected, especially for credit sales. Defaults to the current
            date and time and is indexed.
        payment_mode (Optional[PaymentMode]): The method used by the customer
            to pay for the sale, using the `PaymentMode` enum. Defaults to None.
            none: Indicates that no specific payment mode has been specified.
            Cash: Payment made using physical currency.
            Cheque: Payment made via a written cheque.
            BankTransfer: Payment made by transferring funds directly from one
                bank account to another.
            Electronic: Payment made through electronic means, such as credit/debit
                cards or online payment platforms.
        sales_type (Optional[SalesType]): The type of sale         
            Cash: Indicates a sale where the customer pays the full amount
                at the time of purchase.
            Credit: Indicates a sale where the customer is granted credit and
                will pay at a later date.
        bank (Optional[integer]): The Bank Account of the organization where the deposit was made
        cheque (Optional[integer]): The Cheque information 
        discount (float): The total discount applied to the sale. Defaults to 0.
        payment_status (Optional[PaymentStates]): The current payment status of
            the sale,
            notPaid: Indicates that the full amount of the sale is still outstanding.
            Paid: Indicates that the full amount of the sale has been received.
            PartiallyPaid: Indicates that some portion of the sale amount has been
                paid, but a balance remains.
        payment_date (Optional[datetime]): The date when the payment for the
            sale was received.
        total_sales (float): The final total amount of the sale after discounts.
        total_quantity (float): The total number of items sold in this transaction.
        gross_sales (float): The total sales amount before any discounts.
        total_sales_in_words (Optional[string]): The total sales amount expressed in
            words for clarity on documents.
        status (Optional[SalesStates]): The current operational status of the
            sale,
            new: Indicates that the sale has been initiated but is not yet finalized.
            closed: Indicates that the sale has been completed and finalized.
            void: Indicates that the sale has been cancelled or reversed.
    """

    id: Optional[int] = Field(default=None, primary_key=True)
    employee: int = Field(foreign_key="users.id", index=True)
    route: int = Field(foreign_key="route.id", index=True)
    point_of_sale: int = Field(foreign_key="point_of_sale.id", index=True)
    date: datetime = Field(default=datetime.now(), index=True)
    remark: Optional[str] = Field(default=None)
    payment_due_date: datetime = Field(default=datetime.now(), index=True)
    payment_mode: Optional[PaymentMode] = Field(default=None)
    sales_type: Optional[SalesType] = Field(default=SalesType.Cash)
    bank: Optional[int] = Field(default=None, foreign_key="bank_account.id", index=True)
    cheque: Optional[int] = Field(default=None, foreign_key="cheque.id", index=True)
    discount: float = Field(default=0)
    payment_status: Optional[PaymentStates] = Field(default=None)
    payment_date: Optional[datetime] = Field(default=None)
    total_sales: float
    total_quantity: float
    gross_sales: float
    total_sales_in_words: Optional[str] = Field(default=None)
    status: Optional[SalesStates] = Field(default=None)
    sales_items: Optional[List["SalesItem"]] = Relationship(back_populates= "sales")

class SalesTransaction(SQLModel, table=True):
    __tablename__ = "sales_transaction"

    """
    Represents a single transaction that links a deposit to a specific sale.

    This table records individual instances where a deposit is applied to a particular sale.
    It serves as a historical record of how deposits are allocated to sales.

    Attributes:
        id (Optional[integer]): The unique identifier for this sales transaction. Automatically generated.
        date (datetime): The date and time when this transaction occurred.
                         Defaults to the current UTC time. Indexed for querying by date.
        sales (integer): The foreign key referencing the 'sale' table, identifying the sale involved in this transaction.
                       Indexed for efficient retrieval of transactions for a specific sale.
        deposit (integer): The foreign key referencing the 'deposit' table, identifying the deposit used in this transaction.
                       Indexed for finding transactions associated with a specific deposit.
        amount (float): The amount of the deposit applied to the sale in this transaction.
    """
    # The employee will link a deposit with each sale that they made
    id: Optional[int] = Field(default=None, primary_key=True)
    date: datetime = Field(default=datetime.now(), index=True)
    sales: int = Field(foreign_key="sale.id", index=True)
    amount: float


class SalesItem(SQLModel, table=True):
    __tablename__ = "sales_item"

    """
    Represents a single item included in a sale.

    This table provides a line-item breakdown of a sale, detailing each product sold,
    its quantity, price, discounts, and the resulting total and before-tax amounts.

    Attributes:
        id (Optional[integer]): The unique identifier for this sales item. Automatically generated.
        product (integer): The foreign key referencing the 'product' table, indicating the product sold in this item.
                         Indexed for querying items related to a specific product.
        quantity (float): The quantity of the product sold in this item.
        unit_price (float): The price of a single unit of the product at the time of sale.
        discount (float): The discount applied to this specific item.
        sales (integer): The foreign key referencing the 'sale' table, identifying the sale this item belongs to.
                       Indexed for retrieving all items within a specific sale.
        total (float): The total price of this item after applying the discount.
        before_tax (float): The price of this item before any taxes were applied.
    """

    id: Optional[int] = Field(default=None, primary_key=True)
    sales_id: int = Field(foreign_key="sale.id", index=True)
    sales: Optional[Sale] = Relationship(back_populates="sales_items")
    employee: Optional[int] = Field(foreign_key="users.id", index=True)
    product: int = Field(foreign_key="product.id", index=True)
    quantity: float
    unit_price: float
    discount: float
    total: float
    before_tax: float

class PenetrationStatus(str, Enum):
    """
    Defines the possible statuses of a penetration record.

    A penetration record represents an effort to onboard a new outlet. The status indicates
    the current stage of this effort.

    Members:
        new: The penetration record has been created and is awaiting a decision.
        accepted: The penetration has been approved.
        rejected: The penetration has been declined.
    """

    new = "New"
    accepted = "Accepted"
    rejected = "Rejected"


class Penetration(SQLModel, table=True):
    __tablename__ = "penetration"

    """
    Represents a penetration record for onboarding a new outlet. This model captures outlet information,
    the employee to that registered the outlet, and tracks the status of the penetration.
    
    Attributes:
        id (Optional[integer]): Unique identifier for the penetration record (primary key).
        outlet (integer): Foreign key linking to the Outlet table.
        employee (integer): Foreign key linking to the Employee table.
        status (PenetrationStatus): Status of the penetration (default: new).
        outlet (Optional[Outlet]): Relationship to the Outlet details.

    """
    id: Optional[int] = Field(default=None, primary_key=True)
    company_name: str = Field(index=True)
    outlet_name: str = Field(index=True)
    channel: Optional[str] = Field(default=None)
    tin: str
    phone: str = Field(index=True)
    email: str
    address: int = Field(foreign_key="address.id", index=True)
    location: int = Field(foreign_key="geolocation.id", index=True)

    employee: int = Field(foreign_key="users.id", index=True)
    status: PenetrationStatus = Field(default=PenetrationStatus.new)

class InvoiceStates(str, Enum):
    """
    Represents the status of an invoice.

    Members:
        new: The invoice is new.
        void: The invoice is void.
    """

    new = "New"
    void = "Void"


class InvoiceTypes(str, Enum):
    """
    Represents the type of an invoice.

    Members:
        cash: The invoice is a cash invoice.
        credit: The invoice is a credit invoice.
    """

    cash = "Cash"
    credit = "Credit"


class Invoice(SQLModel, table=True):
    __tablename__ = "invoice"

    """
    Represents an invoice.

    Attributes:
        id (Optional[integer]): The unique identifier of the invoice.
        number (integer): The invoice number.
        type (InvoiceTypes): The type of the invoice (cash or credit).
        status (InvoiceStates): The status of the invoice (new or void).
        remark (Optional[string]): A remark about the invoice.
        date (datetime): The date of the invoice. Defaults to the current UTC time.
        sales (integer): The ID of the sale associated with the invoice.
        organization (integer): The ID of the organization.
        active (boolean): A flag indicating if the invoice is active.
    """

    id: Optional[int] = Field(default=None, primary_key=True)
    number: int
    type: InvoiceTypes
    invoice_state: InvoiceStates
    remark: Optional[str] = Field(default=None)
    date: datetime = Field(default=datetime.now(), index=True)
    sales: int = Field(foreign_key="sale.id", index=True)
    organization: Optional[int] = Field(foreign_key="organization.id", index=True)

